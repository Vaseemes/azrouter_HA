- hosts: localhost
  vars:
    vars:
      uucloud: "{{ lookup('file', (ansible_config_file | dirname ) + '/playbooks/config/standard.json') }}"

  tasks:
    - set_fact:
        apps:
          - name: "rancher"
            url: "https://api.github.com/repos/rancher/rancher/releases/latest"
#            currentVersion: "{{ uucloud.services.rancher.versions.rancherImage }}"
          - name: "rke2"
            url: "https://api.github.com/repos/rancher/rancher/releases/latest"
#            currentVersion: "{{ uucloud.services.kubernetes.rke2_version }}"
          - name: "openebs_localpvImage"
            url: "https://api.github.com/repos/openebs/dynamic-localpv-provisioner/releases/latest"
#            currentVersion: "{{ uucloud.services.openebs.versions.localpvImage }}"
          - name: "openebs_linuxUtils"
            url: "https://api.github.com/repos/openebs/linux-utils/releases/latest"
#            currentVersion: "{{ uucloud.services.openebs.versions.linuxUtilsImage }}"
          - name: "cert-manager"
            url: "https://api.github.com/repos/cert-manager/cert-manager/releases/latest"
#            currentVersion: "{{ uucloud.services.certman.versions.wekhookImage }}"
          - name: "ingress-nginx"
            url: "https://api.github.com/repos/kubernetes/ingress-nginx/releases/latest"
#            currentVersion: "{{ uucloud.services.ingress.versions.controllerImage }}"
          - name: "harbor"
            url: "https://api.github.com/repos/goharbor/harbor/releases/latest"
#            currentVersion: "{{ uucloud.services.harbor.versions.harborPortalImage }}"
          - name: "grafana"
            url: "https://api.github.com/repos/grafana/grafana/releases/latest"
#            currentVersion: "{{ uucloud.services.grafana.versions.grafanaImage }}"

    - set_fact:
        docker_images:
          - name: "mongo"
            repo: "percona/percona-server-mongodb"
#            currentVersion: "{{ uucloud.services.mongo.versions.mongoImage }}"
          - name: "nexus"
            repo: "sonatype/nexus3"
#            currentVersion: "{{ uucloud.services.nexus.versions.nexusImage }}"
          - name: "opensearch-dashboards"
            repo: "opensearchproject/opensearch-dashboards"
#            currentVersion: "{{ uucloud.services.opensearch.versions.dashboardImage }}"
          - name: "downloadDashboardsImage"
            repo: "curlimages/curl"
#            currentVersion: "{{ uucloud.services.grafana.versions.downloadDashboardsImage }}"
          - name: "prometheus"
            repo: "bitnami/prometheus"
#            currentVersion: "{{ uucloud.services.prometheus.versions.prometheusImage }}"
          - name: "graylog"
            repo: "graylog/graylog"
#            currentVersion: "{{ uucloud.services.graylog.versions.graylogImage }}"
          - name: "rabbit"
            repo: "bitnami/rabbitmq"
#            currentVersion: "{{ uucloud.services.rabbit.versions.rabbitImage }}"
          - name: "minioImage"
            repo: "minio/minio"
#            currentVersion: "{{ uucloud.services.minio.versions.minioImage }}"
          - name: "mcImage"
            repo: "minio/mc"
#            currentVersion: "{{ uucloud.services.minio.versions.mcImage }}"

    ### Task 1: Task to check API versions for applications from GitHub releases
    - name: Check versions
      uri:
        url: "{{ item.url }}"
        method: GET
        return_content: yes
      register: latest_releases
      loop_control:
        label: "Checking for new version of the {{ item.name }} application"
      with_items:
        - "{{ apps }}"

    - name: Show output
      debug:
        msg: "App {{ item.item.name }} - new version is: {{ item.json.tag_name }}"
      loop_control:
        label: "app: {{ item.item.name }}"
      with_items:
        - "{{ latest_releases.results }}"

    ### Task 2: Check the latest versions from Docker Hub
    - name: Check latest Docker Hub versions
      uri:
        url: "https://registry.hub.docker.com/v2/repositories/{{ item.repo }}/tags?page_size=4"
        method: GET
        return_content: yes
      register: docker_tags
      loop_control:
        label: "Checking for new version of the Docker image {{ item.name }}"
      with_items:
        - "{{ docker_images }}"

    ### Task 3: Show the result for Docker images with a check for "latest"
    - name: Determine and show new Docker image versions
      vars:
        suitable_tags: { }
      block:
        - name: Determine suitable tags excluding "latest", "sha256-", "debian", and "rc"
          set_fact:
            suitable_tags: "{{ suitable_tags | combine({ item.item.name: (item.json.results | selectattr('name', 'search', '^(?!latest$)(?!sha256-)(?!.*debian.*)(?!.*rc.*).*$') | map(attribute='name') | list | first | default('No suitable tag found')) }) }}"
          loop_control:
            label: "Docker image: {{ item.item.name }}"
          with_items:
            - "{{ docker_tags.results }}"


        - name: Print suitable version tag
          debug:
            msg: "Docker image {{ item.item.name }} - new version is: {{ suitable_tags[item.item.name] }}"
          loop_control:
            label: "Docker image: {{ item.item.name }}"
          with_items:
            - "{{ docker_tags.results }}"


